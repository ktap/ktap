
KTAP TRACING
------------
------------

1. High Level Tracing Primitive
-------------------------------

1). trace EVENTDEF { action }
 This is the basic tracing block for ktap, you need to use a specific EVENTDEF
 string, and own event function.

 EVENTDEF is compatible with perf(see perf-list), with glob match, for example:

	syscalls:*			trace all syscalls events
	syscalls:sys_enter_*		trace all syscalls entry events
	kmem:*				trace all kmem related events
	sched:*				trace all sched related events
	*:*				trace all tracepoints in system.

 All events are based on: /sys/kernel/debug/tracing/events/$SYS/$EVENT

2). trace_end { action }
 This is based on kdebug.probe_end function.


2. Low Level Tracing Primitive
------------------------------

1). kdebug.probe_by_id(event_ids, eventfun)
 This function is underly representation of high level tracing primitive.
 event_ids is the id of all events, it's read from
	/sys/kernel/debug/tracing/events/$SYS/$EVENT/id

 for multi-events tracing, the event_ids is concatenation of all id, for example:
 "2 3 4", seperated by blank space.

 The second argument in above examples is a function:

 function eventfun () { action }

 built-in event access keywords used in event tracing context:

 argevent
     event object, you can print it by: print(argevent), it will print events
     into human readable string, the result is mostly same as each entry of
     /sys/kernel/debug/tracing/trace

 argname
     event name, each event have a name associated with it.

 arg1..9
     get argument 1..9 of event object.


2). kdebug.probe_end (endfunc)
 This function is used for invoking a function when tracing end, it will wait until
 user press CTRL+C to stop tracing, then ktap will call endfunc function, user could
 show tracing results in that function, or do other things.


3). print_backtrace()
print current task stack info

