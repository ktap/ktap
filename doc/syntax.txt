
KTAP Syntax
-----------

ktap's syntax is design on the mind of C language syntax friendly,
to make it easy scripting by kernel developer.

Below is some differences between ktap and C.

1) Variable declaration
 The biggest syntax differences with C is ktap is a dynamic language,
 so you won't need add any variable type declaration, just use the variable.

2) All functions in ktap should use keyword "function" declaration

3) ktap don't have "continue" keyword, but C does.

4) Don't need place any ';' at the ending of statement in ktap.
 ktap use free syntax style, so you can choose to use the ';' or not.

5) Table
 ktap have table structure, which C doesn't have.
 table declaration: t = {}
 how to use table:
 t[1] = 1
 t[1] = "xxx"
 t["key"] = 10
 t["key"] = "value"
 for (k, v in pairs(t)) { body }   # looping all elements of table

6) Pointer and Array
 ktap don't have array structure, also don't have any pointer operation.

7) Comments
  the comments of ktap is starting from '#', long comments doesn't support now.

8) nil keyword
 ktap use nil as NULL, the result of any number operate on nil is nil.

9) for-loop
 There have two method of for-loop in ktap:
 for (i = init, limit, step) { body }
 this is same as below in C:
 for (i = init; i < limit; i += step) { body }

 for (k, v in pairs(t)) { body }   # looping all elements of table

Here is the complete syntax of ktap in extended BNF.
(based on lua syntax: http://www.lua.org/manual/5.1/manual.html#5.1)

	chunk ::= {stat [';']} [laststat [';']

	block ::= chunk

	stat ::=  varlist '=' explist | 
		 functioncall | 
		 { block } | 
		 while exp { block } | 
		 repeat block until exp | 
		 if exp { block {elseif exp { block }} [else block] } | 
		 for Name '=' exp ',' exp [',' exp] { block } | 
		 for namelist in explist { block } | 
		 function funcname funcbody | 
		 local function Name funcbody | 
		 local namelist ['=' explist] 

	laststat ::= return [explist] | break

	funcname ::= Name {'.' Name} [':' Name]

	varlist ::= var {',' var}

	var ::=  Name | prefixexp '[' exp ']'| prefixexp '.' Name 

	namelist ::= Name {',' Name}

	explist ::= {exp ',' exp

	exp ::=  nil | false | true | Number | String | '...' | function | 
		 prefixexp | tableconstructor | exp binop exp | unop exp 

	prefixexp ::= var | functioncall | '(' exp ')'

	functioncall ::=  prefixexp args | prefixexp ':' Name args 

	args ::=  '(' [explist] ')' | tableconstructor | String 

	function ::= function funcbody

	funcbody ::= '(' [parlist] ')' { block }

	parlist ::= namelist [',' '...'] | '...'

	tableconstructor ::= '{' [fieldlist] '}'

	fieldlist ::= field {fieldsep field} [fieldsep]

	field ::= '[' exp ']' '=' exp | Name '=' exp | exp

	fieldsep ::= ',' | ';'

	binop ::= '+' | '-' | '*' | '/' | '^' | '%' | '..' | 
		 '<' | '<=' | '>' | '>=' | '==' | '!=' | 
		 and | or

	unop ::= '-'


