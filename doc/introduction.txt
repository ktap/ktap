
				KTAP


Introduction
------------

A New Scripting Dynamic Tracing Tool For Linux

KTAP is a new scripting dynamic tracing tool for Linux,
it uses a scripting language and lets users trace the Linux kernel dynamically.
KTAP is designed to give operational insights with interoperability
that allow users to tune, troubleshoot and extend kernel and application.
It's similar with Linux Systemtap and Solaris Dtrace.

KTAP have different design principles from Linux mainstream dynamic tracing
language in that it's based on bytecode, so it doesn't depend upon GCC,
doesn't require compiling kernel module for each script, safe to use in
production environment, fulfilling the embedd ecosystem's tracing needs.

KTAP implementation is initial based on Lua programming language,
Lua is a powerful, fast, lightweight, embeddable scripting language.
KTAP changed a lot on Lua, for better suit for kernel embedding purpose.
Thanks Lua.

Requirements
------------
- Linux 3.1 or later(Need some kernel patches for kernel earlier than 3.1)
- CONFIG_EVENT_TRACING enabled
- CONFIG_PERF_EVENTS enabled
- CONFIG_DEBUG_FS enabled
  (make sure debugfs mounted before insmod ktapvm
   mount debugfs: mount -t debugfs none /sys/kernel/debug/)

Note that those configuration is always enabled in Linux distribution,
like REHL, Fedora, Ubuntu, etc.


Building & Running
------------------

1) Clone ktap  

	[root@jovi]# git clone https://github.com/ktap/ktap.git

2) Compiling ktap  

	[root@jovi]# cd ktap
	[root@jovi]# make       #generate ktapvm kernel module and ktap binary

3) Load ktapvm kernel module(make sure debugfs mounted)  

	[root@jovi]# make load  #need to be root or have sudo access

4) Running ktap  

	[root@jovi]# ./ktap scripts/syscalls.kp


License
-------
GPL v2


Contribution
------------
   https://github.com/ktap/ktap.git


Contact
-------
   zhangwei(Jovi) <jovi.zhangwei@gmail.com>

